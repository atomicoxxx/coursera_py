count_i=0
def merge(left,right): 
  """Assumes left and right are sorted lists. 
Returns a new sorted list containing the same elements 
as (left + right) would contain.""" 
  global count_i
  result = [] 
  i,j = 0, 0 
  while i < len(left) and j < len(right): 
      if left[i] <= right[j]: 
         result.append(left[i]) 
         i = i + 1
      else: 
         result.append(right[j]) 
         j = j + 1 
         count_i+=1               
  while (i < len(left)): 
      result.append(left[i]) 
      i = i + 1
      count_i+=1              
  while (j < len(right)): 
      result.append(right[j]) 
      j = j + 1
                     
  return result 
             
def mergesort(L): 
   """Returns a new sorted list with the same elements as L""" 
   print L 
   if len(L) < 2: 
      return L[:] 
   else: 
      middle = len(L) // 2 
      left = mergesort(L[:middle]) 
      right = mergesort(L[middle:]) 
      together = merge(left,right) 
      print 'merged', together
      return together 
    
def brute_force_inversions(a):
    """ Brute force algorithm to count number of inversions in a list a"""
    no_of_inversions=0
    for i in range(len(a)):
        for j in range(i+1,len(a)):
            if a[i] > a[j]:
                no_of_inversions+=1
    return no_of_inversions

#Test case. There are 590 inversions
j=[ 37, 7, 2, 14, 35, 47, 10, 24, 44, 17, 34, 11, 16, 48, 1, 39, 6, 33, 43, 26, 40, 4, 28, 5, 38, 41, 42, 12, 13, 21, 29, 18, 3, 19, 0, 32, 46, 27, 31, 25, 15, 36, 20, 8, 9, 49, 22, 23, 30, 45]
    
mergesort(j)
print brute_force_inversions(j), count_i
 
