import time

class  mslista:
    def __init__(self, lista):
        self.uolista=lista
        self.cinv=0 #count inversions for mergsort
        self.bcinv=0 #count inversions for bruteforce
        self.timebf=0
        self.timems=0
        
    def ordenalista(self):
         time1=0
         time2=0
         time1=time.time()
         self.ordlista=[]
         self.ordlista=self.mergesort(self.uolista)
         time2=time.time()
         self.timems=time2-time1
    def getordlista(self):
        return self.ordlista
        
    def getinversions(self):

        self.ordenalista()
        return str(self.cinv) + " inversions. Elapsed Time (secs):" + str(self.timems)
    
    def brutforce(self):
        """ Brute force algorithm to count number of inversions in a list a. It takes a long time, please use carefully"""
        
        self.bcinv=0 #to prevent call uneeded. If we call twice, and do not init var here, will get value dobled. 
        time1=time.time()
        for i in range(len(self.uolista)):
            for j in range(i+1,len(self.uolista)):
                if self.uolista[i] > self.uolista[j]:
                    self.bcinv+=1

        
    def merge(self,left,right):
        """Assumes left and right are sorted lists. 
        Returns a new sorted list containing the same elements 
        as (left + right) would contain.""" 
        result = [] 
        i,j = 0, 0 
        while i < len(left) and j < len(right): 
            if left[i] <= right[j]: 
                result.append(left[i]) 
                i = i + 1
            else: 
                self.cinv+=len(left[i:]) 
                result.append(right[j]) 
                j = j + 1 
        while (i < len(left)): 
            result.append(left[i]) 
            i = i + 1
      
        while (j < len(right)): 
            result.append(right[j]) 
            j = j + 1
        return result
        
    def mergesort(self,lista):
        """Returns a new sorted list with the same elements as L"""
        if len(lista) < 2: 
            return lista[:] 
        else: 
            middle = len(lista) // 2 
            left = self.mergesort(lista[:middle]) 
            right = self.mergesort(lista[middle:]) 
            together = self.merge(left,right) 
            #print 'merged', together
            return together 
        
#Test case.
#j=[6,5,4,3,2,1]
f=open("c:/netdados/Coursera/da/IntegerArray.txt",'r')
lst=[]   
for line in f:
    lst.append(int(line))
f.close()    
z=mslista(lst)
print len(lst)," Elementos a classificar"
print "working"
print z.getinversions()
print "Done"
