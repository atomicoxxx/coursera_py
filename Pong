# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
PADDLE1_COLOR="Olive"
PADDLE2_COLOR="Teal"

# helper function that spawns a ball by updating the 
# ball's position vector and velocity vector
# if right is True, the ball's velocity is upper right, else upper left
def ball_init(right):
    global ball_pos, ball_vel # these are vectors stored as lists
    global ball_color
    ball_color=random.choice(["White","Silver","Purple","Fuchsia","Green"])
    ball_pos=[WIDTH / 2,HEIGHT / 2]
    #If right=True, start ball to right and Up (negative y in vel)
    #If right=False, start ball to Left and Up (negative y in vel)
    if right==True:
        ball_vel=[random.randrange(120, 240)/60,-random.randrange(60, 180)/30]
    else:
        ball_vel=[-random.randrange(120, 240)/60,-random.randrange(60, 180)/30]

# define event handlers

def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are floats
    global score1, score2  # these are ints
    score1=0
    score2=0
    paddle1_pos=[HALF_PAD_WIDTH,(HEIGHT-PAD_HEIGHT)//2]
    paddle2_pos=[WIDTH-HALF_PAD_WIDTH,(HEIGHT-PAD_HEIGHT)//2]
    paddle1_vel=0
    paddle2_vel=0
    ball_init(random.choice([True,False]))       
    
        
def draw(c):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
 
    # update paddle's vertical position, keep paddle on the screen
    paddle1_pos[1]=paddle1_pos[1]+paddle1_vel
    paddle2_pos[1]=paddle2_pos[1]+paddle2_vel
    #Control if reach top orbottom of canvas
    if paddle1_pos[1]<=0:
       paddle1_pos[1]=0
 
    if paddle1_pos[1]>=HEIGHT-PAD_HEIGHT:
       paddle1_pos[1]=HEIGHT-PAD_HEIGHT
 
    if paddle2_pos[1]<=0:
       paddle2_pos[1]=0
 
    if paddle2_pos[1]>=HEIGHT-PAD_HEIGHT:
       paddle2_pos[1]=HEIGHT-PAD_HEIGHT
    # draw mid line and gutters
    c.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    c.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    c.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
    
    # draw paddles
    c.draw_line([paddle1_pos[0],paddle1_pos[1]],[paddle1_pos[0],paddle1_pos[1]+PAD_HEIGHT], PAD_WIDTH, PADDLE1_COLOR)
    c.draw_line([paddle2_pos[0],paddle2_pos[1]],[paddle2_pos[0],paddle2_pos[1]+PAD_HEIGHT], PAD_WIDTH, PADDLE2_COLOR)
      
    # update ball
    ball_pos[0]=ball_pos[0]+ball_vel[0]
    ball_pos[1]=ball_pos[1]+ball_vel[1]
    
    #Control if ball reaches bottom or top of canvas
    if ball_pos[1] <= BALL_RADIUS:
        ball_pos[1]= BALL_RADIUS
        ball_vel[1]=-ball_vel[1]
    if ball_pos[1]>=HEIGHT-BALL_RADIUS:
        ball_pos[1]= HEIGHT-BALL_RADIUS
        ball_vel[1]=-ball_vel[1]
        
    #Control if ball hits left wall (vertical line)
    if ball_pos[0]-BALL_RADIUS<=PAD_WIDTH:
        #Control if is on paddle
        if ball_pos[1]<=paddle1_pos[1]+PAD_HEIGHT and ball_pos[1]>=paddle1_pos[1]:
            ball_pos[0]=PAD_WIDTH+BALL_RADIUS
            ball_vel[0]=-ball_vel[0]*1.4
           #Control if ball is on 1rst or 2nd half of paddle and change vertical velocity acording to it
            if ball_pos[1]<=paddle1_pos[1]+HALF_PAD_HEIGHT: # 1rst half
                ball_vel[1]=-ball_vel[1]*1.4
            else:
                ball_vel[1]=ball_vel[1]*1.4
        else:
            score2=score2+1
            ball_init(True)        
           
    #Control if ball hits right wall (vertical line)
    if ball_pos[0]+BALL_RADIUS>=WIDTH-PAD_WIDTH:
        #Control if is on paddle
        if ball_pos[1]<=paddle2_pos[1]+PAD_HEIGHT and ball_pos[1]>=paddle2_pos[1]:
            ball_pos[0]=WIDTH-PAD_WIDTH-BALL_RADIUS
            ball_vel[0]=-ball_vel[0]*1.4
             #Control if ball is on 1rst or 2nd half of paddle and change vertical velocity acording to it
            if ball_pos[1]<=paddle2_pos[1]+HALF_PAD_HEIGHT: # 1rst half
                ball_vel[1]=-ball_vel[1]*1.4
            else:
                ball_vel[1]=ball_vel[1]*1.4
        else:
            score1=score1+1
            ball_init(False)
        
    # draw ball and scores
    c.draw_circle(ball_pos, BALL_RADIUS, 1, ball_color, ball_color)
    # Score Player Left (1)
    c.draw_text(str(score1),(260,20),20,"Red")
    # Score Player Right (2)
    c.draw_text(str(score2),(340,20),20,"Red")
    
def keydown(key):
    global paddle1_vel, paddle2_vel
#Left player uses w - Up and s - Down
#Right player uses up and down keys
    if key ==simplegui.KEY_MAP["down"]:
        paddle2_vel+=4
    elif key==simplegui.KEY_MAP["s"]:    
        paddle1_vel+=4
    elif key ==simplegui.KEY_MAP["up"]:
        paddle2_vel-=4
    elif key==simplegui.KEY_MAP["w"]:    
        paddle1_vel-=4
   
def keyup(key):
    global paddle1_vel, paddle2_vel
#Left player uses w - Up and s - Down
#Right player uses up and down keys
    if key ==simplegui.KEY_MAP["down"]:
        paddle2_vel=0
    elif key ==simplegui.KEY_MAP["s"]:    
        paddle1_vel=0
    elif key ==simplegui.KEY_MAP["up"]:
        paddle2_vel=0
    elif key ==simplegui.KEY_MAP["w"]:    
        paddle1_vel=0
# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
button = frame.add_button("Restart", new_game, 150)


# start frame
frame.start()
new_game()
