# Mini-project #6 - Blackjack
#Can be teseed here: http://www.codeskulptor.org/#user15_ssgmSNvcqx_0.py
import simplegui
import random

# load card sprite - 949x392 - source: jfitz.com
CARD_SIZE = (73, 98)
CARD_CENTER = (36.5, 49)
card_images = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/cards.jfitz.png")

CARD_BACK_SIZE = (71, 96)
CARD_BACK_CENTER = (35.5, 48)
card_back = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/card_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0


# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}

# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.handcards=[]
        self.value=0
        
    def __str__(self):
        s=""
        i=0
        while i<len(self.handcards):
            s=s+str(self.handcards[i])+" "
            i=i+1
        return s

    def add_card(self, card):
        self.handcards.append(card)
        self.value=self.value+VALUES[card.get_rank()]

    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        v=self.value
        for c in self.handcards:
            if c.get_rank()=='A' and v<=11:
                v=v+10
                                       
        return v
    
    def draw(self, canvas, pos):
        while i<len(self.handcards):
            poshand=(pos[0]+80,pos[1])
            self.handcards[i].draw(canvas, poshand)
            i=i+1
        
# define deck class 
class Deck:
    def __init__(self):
        self.deckcards=[]
        self.dealedcards=[] 
        # I'll keep the dealed cards in a separate list. I'll use it wheen i shuffle. Deck+Dealed cards will allways be 52, 
        # and when i want all deck, all i have to do is join both lists
        for s in SUITS:
            for r in RANKS:
                self.deckcards.append(Card(s,r))

    def shuffle(self):
        return random.shuffle(self.deckcards)
        
    def deal_card(self):
        j=self.deckcards[len(self.deckcards)-1]
        self.deckcards.remove(j)
        self.dealedcards.append(j)
        return j
        
    def __str__(self):
        s=""
        i=0
        while i<len(self.deckcards):
            s=s+str(self.deckcards[i])+" "
            i=i+1
        return s
  


#define event handlers for buttons
def deal():
    global outcome, in_play, score
    # your code goes here
    global deck,player,dealer
    if in_play==True:
        score=score-1
    
    deck=Deck()
    player=Hand()
    dealer=Hand()
    deck.shuffle()
    in_play = True
    
    dealer.add_card(deck.deal_card())
    dealer.add_card(deck.deal_card())
    player.add_card(deck.deal_card())
    player.add_card(deck.deal_card())
   
    outcome="Hit or Stand?"
    #Debug
    print player
    print dealer

def hit():
    global outcome, in_play, score
    # if the hand is in play, hit the player
    if in_play==True:
        player.add_card(deck.deal_card())
    # if busted, assign a message to outcome, update in_play and score 
        if player.get_value()>21:
            in_play=False
            outcome="You loose!"
            score=score-1
    
    #Debug purpose
    #print player
    #print player.get_value()

       
def stand():
    global outcome, in_play, score
    
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
    if in_play==True:
        while dealer.get_value()<17:
            dealer.add_card(deck.deal_card())
# assign a message to outcome, update in_play and score
        in_play=False #Game ends here! No mather what happens next.
        if dealer.get_value()>=21:
            score=score+1
            outcome="You win!"
        elif dealer.get_value()<player.get_value():
            score=score+1
            outcome="You win!"
        else:
            score=score-1
            outcome="You Loose!"

    
# draw handler    
def draw(canvas):
    
    # test to make sure that card.draw works, replace with your code below
    dealerpos=[100,200]
    playerpos=[100,400]
    
    canvas.draw_text("BLACKJACK", (180, 50), 40, "Purple")
    canvas.draw_text("Score : " + str(score), (450, 120), 30, "Red")
    canvas.draw_text("Dealer", (50, 150), 40, "Navy")
    canvas.draw_text("Player", (50, 350), 40, "Navy")
    canvas.draw_text(outcome, (200, 350), 20, "Black")
    
    card = Card("S", "A")
    card.draw(canvas, dealerpos)
    card.draw(canvas, playerpos)


# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
frame.start()


# remember to review the gradic rubric
